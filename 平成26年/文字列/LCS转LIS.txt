//某种程度上有加速，hdu2253依然超时
#include<cstdio>
#include<cstdlib>
#include<cstring>

#define BASECH 'A'
#define COUNT  26
#define MAXI 0xffff
typedef unsigned short int USHORT;

char str[30001];
USHORT pos[COUNT][30001]; //要真是30000个A，效率还不如DP，貌似什么算法都得死……
USHORT posp[COUNT];
USHORT dp[30001];  //长度为L的不下降子序列的末尾元素最小是啥

USHORT bisech(USHORT n, USHORT a)  //二分求最后一次a>c[j]的j，返回j
{
	USHORT l, r, mid;

	l = 1;
	r = n;

	while(r > l + 1)
	{
		mid = (l + r) >> 1;
		if(dp[mid] < a)
		{
			if(dp[mid+1] >= a)
			{
				return mid;
			}else{
				l = mid;
			}
		}
		else if(dp[mid] == a)
		{
			do{
				mid--;
			}while(dp[mid] == a);

			return mid;
		}
		else{
			if(dp[mid-1] < a)
			{
				return mid-1;
			}else{
				r = mid;
			}
		}
	}

	if(dp[r] > a)
		return l;
	else
		return r;
}

USHORT LCS()
{
	int i, j, k, size = 1, code;
	bool flag = true;

	dp[1] = MAXI;
	for(i=0;str[i]>0;i++)
	{
		code = str[i] - BASECH;
		for(j=posp[code]-1;j>=0;j--)
		{
			flag = false;
			if( pos[code][j] <= dp[1] )
				k = 1;
			else if( pos[code][j] > dp[size] )
				k = ++size;
			else
				k = bisech(size, pos[code][j]) + 1;
			if(k <= size) //防止pos[code][j]==dp[size]之情况
				dp[k] = pos[code][j];
		}
	}

	if(flag)
		return 0;
	else
		return size;
}

bool input()
{
	int i, code;

	if(scanf("%s",str)==EOF)
		return false;
	for(i=0;i<COUNT;i++)
	{
		posp[i] = 0;
	}
	for(i=0;str[i]>0;i++)
	{
		code = str[i]-BASECH;
		pos[code][posp[code]] = i;
		posp[code]++;
	}
	scanf("%s",str);

	return true;
}

int main()
{
	while(input())
	{
		printf("%d\n",LCS());
	}
	return 0;
}
